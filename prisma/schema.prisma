// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Permissao {
  id               String             @id @default(uuid()) @db.VarChar(36)
  nome             String             @db.VarChar(60)
  descricao        String             @db.VarChar(255)
  chave            String             @unique @db.VarChar(100)
  categoria        String             @default("GERAL") @db.VarChar(50)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  UsuarioPermissao UsuarioPermissao[]

  @@map("permissoes")
}

model UsuarioPermissao {
  id          String    @id @default(uuid()) @db.VarChar(36)
  usuarioId   String    @db.VarChar(36)
  permissaoId String    @db.VarChar(36)
  concedida   Boolean   @default(false)
  usuario     Usuario   @relation(fields: [usuarioId], references: [id])
  permissao   Permissao @relation(fields: [permissaoId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([usuarioId, permissaoId])
  @@map("usuario_permissoes")
}

model Usuario {
  id                       String        @id @default(uuid()) @db.VarChar(36)
  nome                     String        @db.VarChar(60)
  email                    String        @unique @db.VarChar(60)
  senha                    String        @db.VarChar(60)
  recuperacao              String?       @db.VarChar(6)
  tipo                     TipoUsuario
  empresa                  Empresa?      @relation(fields: [empresaId], references: [id])
  empresaId                String?       @db.VarChar(36)
  permissoesPersonalizadas Boolean       @default(false)
  createdAt                DateTime      @default(now())
  updatedAt                DateTime      @updatedAt
  Notificacao              Notificacao[]
  Logs                     Logs[]
  Produto                  Produto[]
  Venda                    Venda[]

  NotificacaoLida     NotificacaoLida[]
  UsuarioPermissao    UsuarioPermissao[]
  MovimentacaoEstoque MovimentacaoEstoque[]
  Inventario          Inventario[]

  @@map("usuarios")
}

model Fornecedor {
  id        String    @id @default(uuid()) @db.VarChar(36)
  nome      String    @db.VarChar(60)
  cnpj      String    @unique @db.VarChar(18)
  telefone  String    @db.VarChar(17)
  email     String    @unique @db.VarChar(60)
  categoria String    @db.VarChar(60)
  foto      String?   @db.VarChar(255)
  empresa   Empresa   @relation(fields: [empresaId], references: [id])
  empresaId String    @db.VarChar(36)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Produto   Produto[]

  @@map("fornecedores")
}

model Empresa {
  id                  String                @id @default(uuid()) @db.VarChar(36)
  nome                String                @db.VarChar(60)
  slug                String                @unique
  email               String                @unique @db.VarChar(60)
  foto                String?               @db.VarChar(255)
  telefone            String?               @db.VarChar(15)
  endereco            String?               @db.VarChar(255)
  pais                String?               @db.VarChar(60)
  estado              String?               @db.VarChar(2)
  cidade              String?               @db.VarChar(60)
  cep                 String?               @db.VarChar(10)
  catalogoPublico     Boolean               @default(false)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  ChaveAtivacao       ChaveAtivacao?
  usuario             Usuario[]
  Produto             Produto[]
  Convite             Convite[]
  Logs                Logs[]
  Venda               Venda[]
  Notificacao         Notificacao[]
  Fornecedor          Fornecedor[]
  cliente             cliente[]
  MovimentacaoEstoque MovimentacaoEstoque[]
  Inventario          Inventario[]

  @@map("empresas")
}

model cliente {
  id        String   @id @default(uuid()) @db.VarChar(36)
  nome      String   @db.VarChar(60)
  email     String?  @unique @db.VarChar(60)
  telefone  String?  @db.VarChar(17)
  endereco  String?  @db.VarChar(255)
  cidade    String?  @db.VarChar(60)
  estado    String?  @db.VarChar(2)
  cep       String?  @db.VarChar(10)
  empresa   Empresa  @relation(fields: [empresaId], references: [id])
  empresaId String   @db.VarChar(36)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Venda     Venda[]

  @@map("clientes")
}

model ChaveAtivacao {
  chave     String    @id @default(uuid()) @db.VarChar(36)
  empresa   Empresa?  @relation(fields: [empresaId], references: [id])
  empresaId String?   @unique @db.VarChar(36)
  utilizada Boolean   @default(false) 
  dataUso   DateTime? 
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("chaves_ativacao")
}

model Produto {
  id             Int                   @id @default(autoincrement())
  nome           String                @db.VarChar(60)
  descricao      String                @db.VarChar(255)
  preco          Float
  quantidadeMin  Int                   @default(0)
  foto           String?               @db.VarChar(255)
  noCatalogo     Boolean               @default(false)
  usuarioId      String?               @db.VarChar(36)
  usuario        Usuario?              @relation(fields: [usuarioId], references: [id])
  fornecedor     Fornecedor?           @relation(fields: [fornecedorId], references: [id])
  fornecedorId   String?               @db.VarChar(36)
  categoria      categoria?            @relation(fields: [categoriaId], references: [id])
  categoriaId    String?               @db.VarChar(36)
  empresa        Empresa?              @relation(fields: [empresaId], references: [id])
  empresaId      String?               @db.VarChar(36)
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  Venda          Venda[]
  Movimentacoes  MovimentacaoEstoque[]
  ItemInventario ItemInventario[]

  @@map("produtos")
}

model Venda {
  id                  Int                   @id @default(autoincrement())
  empresa             Empresa               @relation(fields: [empresaId], references: [id])
  empresaId           String                @db.VarChar(36)
  produto             Produto               @relation(fields: [produtoId], references: [id])
  produtoId           Int
  usuarioId           String?               @db.VarChar(36)
  usuario             Usuario?              @relation(fields: [usuarioId], references: [id])
  clienteId           String?               @db.VarChar(36)
  cliente             cliente?              @relation(fields: [clienteId], references: [id])
  quantidade          Int
  valorVenda          Float
  valorCompra         Float
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  MovimentacaoEstoque MovimentacaoEstoque[]

  @@map("vendas")
}

model categoria {
  id        String    @id @default(uuid()) @db.VarChar(36)
  nome      String    @db.VarChar(60)
  descricao String    @db.VarChar(255)
  produtos  Produto[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("categorias")
}

model Notificacao {
  id              String            @id @default(uuid()) @db.VarChar(36)
  titulo          String            @db.VarChar(60)
  descricao       String            @db.VarChar(255)
  lida            Boolean           @default(false)
  empresa         Empresa?          @relation(fields: [empresaId], references: [id])
  empresaId       String?           @db.VarChar(36)
  usuarioId       String?           @db.VarChar(36)
  usuario         Usuario?          @relation(fields: [usuarioId], references: [id])
  conviteId       String?           @unique @db.VarChar(36)
  convite         Convite?          @relation(fields: [conviteId], references: [id])
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  NotificacaoLida NotificacaoLida[]

  @@map("notificacoes")
}

model Convite {
  id          String        @id @default(uuid()) @db.VarChar(36)
  email       String        @db.VarChar(60)
  empresaId   String        @db.VarChar(36)
  empresa     Empresa       @relation(fields: [empresaId], references: [id])
  status      StatusConvite @default(PENDENTE)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  notificacao Notificacao?

  @@map("convites")
}

model NotificacaoLida {
  notificacaoId String      @db.VarChar(36)
  usuarioId     String      @db.VarChar(36)
  notificacao   Notificacao @relation(fields: [notificacaoId], references: [id])
  usuario       Usuario     @relation(fields: [usuarioId], references: [id])
  createdAt     DateTime    @default(now())

  @@id([notificacaoId, usuarioId])
  @@map("notificacoes_lidas")
}

model Logs {
  id        String   @id @default(uuid()) @db.VarChar(36)
  descricao String   @db.VarChar(255)
  tipo      TipoLog
  empresa   Empresa? @relation(fields: [empresaId], references: [id])
  empresaId String?  @db.VarChar(36)
  usuarioId String?  @db.VarChar(36)
  usuario   Usuario? @relation(fields: [usuarioId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("logs")
}

model MovimentacaoEstoque {
  id         String           @id @default(uuid()) @db.VarChar(36)
  produto    Produto          @relation(fields: [produtoId], references: [id])
  produtoId  Int
  tipo       TipoMovimentacao
  quantidade Int
  motivo     String?          @db.VarChar(255)
  observacao String?          @db.VarChar(500)
  usuario    Usuario          @relation(fields: [usuarioId], references: [id])
  usuarioId  String           @db.VarChar(36)
  empresa    Empresa          @relation(fields: [empresaId], references: [id])
  empresaId  String           @db.VarChar(36)
  vendaId    Int?
  venda      Venda?           @relation(fields: [vendaId], references: [id])
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  @@map("movimentacoes_estoque")
}

model Inventario {
  id        String           @id @default(uuid()) @db.VarChar(36)
  data      DateTime         @default(now())
  descricao String?          @db.VarChar(255)
  status    StatusInventario
  empresa   Empresa          @relation(fields: [empresaId], references: [id])
  empresaId String           @db.VarChar(36)
  usuario   Usuario          @relation(fields: [usuarioId], references: [id])
  usuarioId String           @db.VarChar(36)
  itens     ItemInventario[]
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@map("inventarios")
}

model ItemInventario {
  id                String     @id @default(uuid()) @db.VarChar(36)
  inventario        Inventario @relation(fields: [inventarioId], references: [id])
  inventarioId      String     @db.VarChar(36)
  produto           Produto    @relation(fields: [produtoId], references: [id])
  produtoId         Int
  quantidadeSistema Int
  quantidadeFisica  Int
  diferenca         Int
  observacao        String?    @db.VarChar(500)
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  @@map("itens_inventario")
}

enum TipoMovimentacao {
  ENTRADA
  SAIDA
}

enum StatusInventario {
  EM_ANDAMENTO
  CONCLUIDO
  CANCELADO
}

enum MotivoMovimentacao {
  VENDA
  COMPRA
  AJUSTE
  DEVOLUCAO
  PERDA
  INVENTARIO
}

enum TipoUsuario {
  ADMIN
  FUNCIONARIO
  PROPRIETARIO
}

enum StatusConvite {
  PENDENTE
  ACEITO
  RECUSADO
}

enum TipoLog {
  CRIACAO
  ATUALIZACAO
  EXCLUSAO
  BAIXA
}

enum Medidas {
  UNIDADE
  LITRO
  KILO
}
